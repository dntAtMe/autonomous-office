syntax = "proto3";

package simulation;

option go_package = "simulation/proto";

// Position represents a 2D coordinate on the grid
message Position {
  int32 x = 1;
  int32 y = 2;
}

// ActionType defines the type of action an entity can take
enum ActionType {
  ACTION_MOVE = 0;
  ACTION_WAIT = 1;
}

// Action represents a decision made by an entity
message Action {
  ActionType type = 1;
  Position direction = 2;
  int32 entity_id = 3;
}

// EntityState represents the current state of an entity
message EntityState {
  int32 id = 1;
  Position position = 2;
  string decided_action_display = 3;
  int64 last_decision_time_ns = 4; // Duration in nanoseconds
  bool is_deciding = 5;
}

// Cell represents a single cell in the grid
message Cell {
  Position position = 1;
  EntityState occupant = 2;
}

// GridState represents the current state of the simulation grid
message GridState {
  int32 width = 1;
  int32 height = 2;
  repeated Cell cells = 3;
}

// EntityRegistrationRequest represents a request to register an entity
message EntityRegistrationRequest {
  int32 entity_id = 1;
  Position position = 2;
}

// EntityRegistrationResponse represents the response to entity registration
message EntityRegistrationResponse {
  bool success = 1;
  string message = 2;
  int32 entity_id = 3;
}

// EntityDecisionRequest represents a request for an entity to make a decision
message EntityDecisionRequest {
  int32 entity_id = 1;
  GridState grid_state = 2;
  int32 tick_number = 3;
  repeated Position possible_moves = 4;
}

// EntityDecisionResponse represents an entity's decision
message EntityDecisionResponse {
  int32 entity_id = 1;
  Action action = 2;
}

// Empty message for requests that don't need parameters
message Empty {}

// Health check response
message HealthResponse {
  string status = 1;
}

// Simulation service definition
service SimulationService {
  // Register an entity in the simulation
  rpc RegisterEntity(EntityRegistrationRequest) returns (EntityRegistrationResponse);

  // Request a decision from an entity
  rpc RequestDecision(EntityDecisionRequest) returns (EntityDecisionResponse);

  // Get current grid state
  rpc GetGridState(Empty) returns (GridState);

  // Health check
  rpc HealthCheck(Empty) returns (HealthResponse);

  // Bidirectional streaming for real-time communication
  rpc EntityStream(stream EntityDecisionResponse) returns (stream EntityDecisionRequest);
}
