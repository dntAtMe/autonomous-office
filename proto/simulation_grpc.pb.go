// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimulationServiceClient is the client API for SimulationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulationServiceClient interface {
	// Register an entity in the simulation
	RegisterEntity(ctx context.Context, in *EntityRegistrationRequest, opts ...grpc.CallOption) (*EntityRegistrationResponse, error)
	// Request a decision from an entity
	RequestDecision(ctx context.Context, in *EntityDecisionRequest, opts ...grpc.CallOption) (*EntityDecisionResponse, error)
	// Get current grid state
	GetGridState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GridState, error)
	// Health check
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	// Bidirectional streaming for real-time communication
	EntityStream(ctx context.Context, opts ...grpc.CallOption) (SimulationService_EntityStreamClient, error)
}

type simulationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulationServiceClient(cc grpc.ClientConnInterface) SimulationServiceClient {
	return &simulationServiceClient{cc}
}

func (c *simulationServiceClient) RegisterEntity(ctx context.Context, in *EntityRegistrationRequest, opts ...grpc.CallOption) (*EntityRegistrationResponse, error) {
	out := new(EntityRegistrationResponse)
	err := c.cc.Invoke(ctx, "/simulation.SimulationService/RegisterEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) RequestDecision(ctx context.Context, in *EntityDecisionRequest, opts ...grpc.CallOption) (*EntityDecisionResponse, error) {
	out := new(EntityDecisionResponse)
	err := c.cc.Invoke(ctx, "/simulation.SimulationService/RequestDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) GetGridState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GridState, error) {
	out := new(GridState)
	err := c.cc.Invoke(ctx, "/simulation.SimulationService/GetGridState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/simulation.SimulationService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) EntityStream(ctx context.Context, opts ...grpc.CallOption) (SimulationService_EntityStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SimulationService_ServiceDesc.Streams[0], "/simulation.SimulationService/EntityStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &simulationServiceEntityStreamClient{stream}
	return x, nil
}

type SimulationService_EntityStreamClient interface {
	Send(*EntityDecisionResponse) error
	Recv() (*EntityDecisionRequest, error)
	grpc.ClientStream
}

type simulationServiceEntityStreamClient struct {
	grpc.ClientStream
}

func (x *simulationServiceEntityStreamClient) Send(m *EntityDecisionResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simulationServiceEntityStreamClient) Recv() (*EntityDecisionRequest, error) {
	m := new(EntityDecisionRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimulationServiceServer is the server API for SimulationService service.
// All implementations must embed UnimplementedSimulationServiceServer
// for forward compatibility
type SimulationServiceServer interface {
	// Register an entity in the simulation
	RegisterEntity(context.Context, *EntityRegistrationRequest) (*EntityRegistrationResponse, error)
	// Request a decision from an entity
	RequestDecision(context.Context, *EntityDecisionRequest) (*EntityDecisionResponse, error)
	// Get current grid state
	GetGridState(context.Context, *Empty) (*GridState, error)
	// Health check
	HealthCheck(context.Context, *Empty) (*HealthResponse, error)
	// Bidirectional streaming for real-time communication
	EntityStream(SimulationService_EntityStreamServer) error
	mustEmbedUnimplementedSimulationServiceServer()
}

// UnimplementedSimulationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimulationServiceServer struct {
}

func (UnimplementedSimulationServiceServer) RegisterEntity(context.Context, *EntityRegistrationRequest) (*EntityRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEntity not implemented")
}
func (UnimplementedSimulationServiceServer) RequestDecision(context.Context, *EntityDecisionRequest) (*EntityDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDecision not implemented")
}
func (UnimplementedSimulationServiceServer) GetGridState(context.Context, *Empty) (*GridState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGridState not implemented")
}
func (UnimplementedSimulationServiceServer) HealthCheck(context.Context, *Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedSimulationServiceServer) EntityStream(SimulationService_EntityStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EntityStream not implemented")
}
func (UnimplementedSimulationServiceServer) mustEmbedUnimplementedSimulationServiceServer() {}

// UnsafeSimulationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulationServiceServer will
// result in compilation errors.
type UnsafeSimulationServiceServer interface {
	mustEmbedUnimplementedSimulationServiceServer()
}

func RegisterSimulationServiceServer(s grpc.ServiceRegistrar, srv SimulationServiceServer) {
	s.RegisterService(&SimulationService_ServiceDesc, srv)
}

func _SimulationService_RegisterEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).RegisterEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simulation.SimulationService/RegisterEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).RegisterEntity(ctx, req.(*EntityRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_RequestDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).RequestDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simulation.SimulationService/RequestDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).RequestDecision(ctx, req.(*EntityDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_GetGridState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).GetGridState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simulation.SimulationService/GetGridState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).GetGridState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simulation.SimulationService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_EntityStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimulationServiceServer).EntityStream(&simulationServiceEntityStreamServer{stream})
}

type SimulationService_EntityStreamServer interface {
	Send(*EntityDecisionRequest) error
	Recv() (*EntityDecisionResponse, error)
	grpc.ServerStream
}

type simulationServiceEntityStreamServer struct {
	grpc.ServerStream
}

func (x *simulationServiceEntityStreamServer) Send(m *EntityDecisionRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simulationServiceEntityStreamServer) Recv() (*EntityDecisionResponse, error) {
	m := new(EntityDecisionResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimulationService_ServiceDesc is the grpc.ServiceDesc for SimulationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimulationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simulation.SimulationService",
	HandlerType: (*SimulationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEntity",
			Handler:    _SimulationService_RegisterEntity_Handler,
		},
		{
			MethodName: "RequestDecision",
			Handler:    _SimulationService_RequestDecision_Handler,
		},
		{
			MethodName: "GetGridState",
			Handler:    _SimulationService_GetGridState_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _SimulationService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EntityStream",
			Handler:       _SimulationService_EntityStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/simulation.proto",
}
